---
// Tools
import { getCollection } from "astro:content";
import { getSortedProjects } from "@/lib/helpers.js";

// Compositions
import Row from "./compositions/Row.astro";
import Stack from "./compositions/Stack.astro";

// Components
import ActiveProjectCard from "./ActiveProjectCard.astro";
import Heading from "./ui/Heading.astro";
import Text from "./ui/Text.astro";

// Data

const projects = (
  await getCollection("projects", ({ data }) => !data.isDraft)
).filter(({ data }) => data.isActive);

const sortedProjects = getSortedProjects(projects);
---

<Stack space="space-10">
  <!-- <Stack space="space-3">
    <Text tagName="p" size="medium" isBadge variant="secondary"
      >Наша робота</Text
    >
    <Heading tagName="h3" size="h5">Активні проєкти</Heading>
  </Stack> -->

  <Heading tagName="h3" size="h5">Основні проєкти</Heading>
  <Row
    columnGap={{
      default: "space-0",
      tablet: "space-4",
      laptop: "space-7",
    }}
    rowGap={{
      default: "space-10",
      tablet: "space-12",
      laptop: "space-14",
    }}
    class="active-projects"
  >
    {
      sortedProjects.map((project) => {
        return (
          <ActiveProjectCard
            project={project}
            class="active-project-item col-12 tablet:col-6"
          />
        );
      })
    }
  </Row>
</Stack>

<style>
  @import "@styles/04-utilities/breakpoints.css";

  .active-projects {
    --_offset: 25;

    @media (--tablet-and-up) {
      /* Set padding bottom to offset of the item height in px to avoid vertical overflow, 
      e.g item height 500px * 0.25 offset */
      padding-block-end: calc(var(--item-height) * var(--_offset) / 100 * 1px);
    }
  }

  .active-project-item:nth-of-type(2n) {
    @media (--tablet-and-up) {
      /* Set the offset in % */
      transform: translateY(calc(var(--_offset) * 1%));
    }
  }
</style>

<script>
  const activeProjects = document.querySelector(
    ".active-projects"
  ) as HTMLElement;

  const activeProjectItem = activeProjects.querySelector(
    ".active-project-item"
  ) as HTMLElement;

  // if items number is odd, then do nothing
  const items = [...activeProjects.children] as HTMLElement[];

  /**
   * Checks if items are even
   * @param {Array} items
   * @returns {Boolean}
   */
  function isEven(items: HTMLElement[]): boolean {
    return items.length % 2 !== 1;
  }

  /**
   * Set item height as a css property on active projects element
   */
  function setItemHeight() {
    const itemRect = activeProjectItem?.getBoundingClientRect();

    activeProjects.style.setProperty("--item-height", `${itemRect.height}`);
  }

  // If items are even numbers
  if (isEven(items)) {
    /**
     * Set initial item height on document load
     */
    setItemHeight();

    /**
     * Recalculate item height on window resize
     */
    window.addEventListener("resize", setItemHeight);
  }
</script>
