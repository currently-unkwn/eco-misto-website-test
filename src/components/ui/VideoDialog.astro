---
// Tools
import { Icon } from "astro-icon/components";

// Components
import Button from "./Button.astro";

type Props = {
  class?: string;
  name: string;
};

const { class: classList, name } = Astro.props;
---

<dialog class:list={[classList]} data-dialog={name}>
  <Button
    variant="icon"
    style="ghost"
    aria-label={`Close ${name}`}
    isDefault={false}
    data-close-dialog
  >
    <Icon name="icon-close" size={32} />

    <span class="sr-only">{`Close ${name}`}</span>
  </Button>
  <div class="video-container">
    <slot />
  </div>
</dialog>

<style>
  @import "@styles/04-utilities/breakpoints.css";

  dialog {
    width: 90%;
    max-width: 62.5rem;

    /* Place dialog in dead center */
    position: fixed;
    inset: 0;
    margin: auto;

    background: none;

    /* Override default overflow, which is hidden */
    overflow: visible;

    animation: fade-out 0.4s var(--ease-out) forwards;
    animation: round-out 0.4s var(--ease-out) forwards;

    /* padding: var(--space-4-fixed); */
  }

  dialog::backdrop {
    background-color: rgba(0, 0, 0, 0.9);
  }

  button[data-close-dialog] {
    --_icon-size: 24px;
    --_padding: var(--space-1-fixed);

    position: absolute;
    top: 0rem;
    right: 0rem;

    padding: var(--_padding);

    border-radius: var(--rounded-md);
    opacity: 0;

    color: var(--color-white);

    transition: background-color var(--transition-default);

    & svg {
      width: var(--_icon-size);
      height: var(--_icon-size);
    }

    @media (orientation: portrait) {
      transform: translateY(-100%);
    }

    @media (orientation: landscape) {
      transform: translateX(100%);
    }

    @media (--laptop-and-up) {
      --_padding: var(--space-2-fixed);
      --_translateY: translateY(calc(-100% + var(--_padding)));

      @media (orientation: portrait) {
        transform: var(--_translateY);
      }

      @media (orientation: landscape) {
        transform: var(--_translateY);
      }
    }
  }

  button[data-close-dialog]:hover {
    /* TODO: Pick a neutral color, add transition */
    background-color: var(--color-secondary);
  }

  dialog > :global(.video-container) {
    aspect-ratio: 16 / 9;

    & :global(iframe),
    & :global(video) {
      width: 100%;
      height: 100%;

      border: 0;
      border-radius: var(--rounded-lg);
    }
  }

  /**
  * State
   */

  dialog[open] {
    animation: fade-in 0.4s var(--ease-out) backwards;
    animation: round-in 0.4s var(--ease-out) backwards;
  }

  dialog[open] button[data-close-dialog] {
    /* Mobile animation */
    @media (orientation: portrait) {
      animation: fade-up 150ms 350ms var(--ease-out) forwards;
    }

    @media (orientation: landscape) {
      animation: fade-right 150ms 350ms var(--ease-out) forwards;
    }

    /* Laptop animation */
    @media (--laptop-and-up) {
      --_animation: fade-up 150ms 350ms var(--ease-out) forwards;

      @media (orientation: portrait) {
        animation: var(--_animation);
      }

      @media (orientation: landscape) {
        animation: var(--_animation);
      }
    }
  }

  /**
   * ANIMATIONS
   */

  @keyframes round-in {
    0% {
      clip-path: inset(50% round 0.5rem);
    }
    100% {
      clip-path: inset(0% round 0.5rem);
    }
  }

  @keyframes round-out {
    0% {
      clip-path: inset(0% round 1.5rem);
    }
    100% {
      clip-path: inset(50% round 1.5rem);
    }
  }

  @keyframes fade-up {
    0% {
      opacity: 0;
      transform: translateY(calc(-100% + 8px + 1rem));
    }

    100% {
      opacity: 1;
      transform: translateY(calc(-100% - 8px));
    }
  }

  @keyframes fade-right {
    0% {
      opacity: 0;
      transform: translateX(calc(100% - 1rem + 4px));
    }

    100% {
      opacity: 1;
      transform: translateX(calc(100% + 4px));
    }
  }

  @keyframes fade-in {
    0% {
      opacity: 0;
    }

    100% {
      opacity: 1;
    }
  }

  @keyframes fade-out {
    0% {
      opacity: 1;
    }

    100% {
      opacity: 0;
    }
  }
</style>
