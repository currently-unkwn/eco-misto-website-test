---
// Tools
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import type { GetStaticPaths } from "astro";
import { getProjectIndex, getSortedProjects } from "@/lib/helpers.js";

// Layouts
import BaseLayout from "@/layouts/BaseLayout.astro";
import ProjectLayout from "@/layouts/ProjectLayout.astro";

// Compositions
import Center from "@/components/compositions/Center.astro";
import Stack from "@/components/compositions/Stack.astro";
import Row from "@/components/compositions/Row.astro";

// Components
import Heading from "@/components/ui/Heading.astro";
import Text from "@/components/ui/Text.astro";
import Shape from "@/components/ui/Shape.astro";
import Section from "@/components/ui/Section.astro";
import H2 from "../../components/project/H2.astro";
import H3 from "../../components/project/H3.astro";
import MyPicture from "@/components/ui/MyPicture.astro";
import ProjectNavigationItem from "@/components/project/ProjectNavigationItem.astro";
import { components } from "@/components/mdxComponents.js";

import CallToAction from "@/components/project/CallToAction.astro";

// Data

export const getStaticPaths = (async () => {
  // filter actual posts, not drafts
  const projects = await getCollection("projects", ({ data }) => !data.isDraft);

  // return object with slug and post data
  return projects.map((project) => ({
    params: {
      slug: project.slug,
    },
    props: {
      project,
      projects,
    },
  }));
}) satisfies GetStaticPaths;

type Props = {
  project: CollectionEntry<"projects">;
  projects: CollectionEntry<"projects">[];
};

const { project, projects } = Astro.props;

const { Content } = await project.render();
const { title, description, cover, isCollage = false } = project.data;

// Sort projects
const sortedProjects = getSortedProjects(projects);

// Get active and archive projects
const activeProjects = sortedProjects.filter(({ data }) => data.isActive);

const archiveProjects = sortedProjects.filter(({ data }) => !data.isActive);

const isActive = project.data.isActive;

// Get index of current project
const index = isActive
  ? getProjectIndex(activeProjects, project)
  : getProjectIndex(archiveProjects, project);

// Set previous and next projects
const previousProject = isActive
  ? activeProjects[index - 1]
  : archiveProjects[index - 1];

const nextProject = isActive
  ? activeProjects[index + 1]
  : archiveProjects[index + 1];
---

<BaseLayout>
  <Section class="hero" isRoundBottom color="secondary">
    <Center
      maxWidth="87.5rem"
      space={{ default: "space-6", tablet: "space-7", laptop: "space-9" }}
    >
      <Stack space={{ default: "space-6", tablet: "space-0" }} class="wrapper">
        <div class="text-wrapper">
          <Shape color="secondary" class="top" />
          <Shape color="secondary" class="bottom" rotate="270deg" />
          <Stack space="space-2" class="hero-text">
            <Heading
              tagName="h1"
              size="h3"
              class="title font-heading color-primary">{title}</Heading
            >
            <Text tagName="p" size="large" class="color-accent"
              >{description}</Text
            >
          </Stack>
        </div>

        <div class="img-wrapper">
          <div class:list={["hero-img", { collage: isCollage }]}>
            <MyPicture src={cover} alt="" width={1120} />
          </div>
        </div>
      </Stack>
    </Center>
  </Section>

  <ProjectLayout>
    <Content components={{ ...components, h2: H2, h3: H3 }} />
  </ProjectLayout>

  {
    isActive ? (
      <>
        <CallToAction />
      </>
    ) : (
      ""
    )
  }
  <Center
    maxWidth="68.75rem"
    space={{ default: "space-6", tablet: "space-7", laptop: "space-9" }}
    class="pagination"
  >
    <Stack space="space-10">
      <Heading tagName="h3" size="h5">Інші проєкти</Heading>
      <Row
        columnGap={{ default: "space-0", tablet: "space-7" }}
        rowGap={{ default: "space-8", tablet: "space-0" }}
      >
        {
          previousProject && (
            <ProjectNavigationItem
              project={previousProject}
              class="previous-project col-12 col-start-1 tablet:col-6"
            />
          )
        }
        {
          nextProject && (
            <ProjectNavigationItem
              project={nextProject}
              class="next-project col-12 col-start-1 tablet:col-6 tablet:col-start-7"
            />
          )
        }
      </Row>
    </Stack>
  </Center>
</BaseLayout>

<style>
  @import "@styles/04-utilities/breakpoints.css";

  .hero {
    --_border-radius: var(--rounded-2xl);
    --_offset-left: 20%;
    --_padding: var(--space-11-fixed);

    padding-block-start: calc(var(--_padding) + var(--header-height));
    padding-block-end: var(--space-11-fixed);

    background-color: var(--color-secondary);
    @media (--tablet-and-up) {
      --_padding: var(--space-16-fixed);
    }

    @media (--laptop-and-up) {
      --_border-radius: var(--rounded-3xl);
      --_padding: var(--space-11-fixed);
    }
  }

  .wrapper {
    position: relative;
  }

  .text-wrapper {
    & .shape {
      display: none;
    }

    @media (--tablet-and-up) {
      position: absolute;
      top: -5rem;

      /* min-height: 14.5rem; */

      & .shape {
        display: block;
      }

      & .shape.top {
        top: 0px;
        right: 0px;
        transform: translateY(calc(100% + 2.5rem)) translateX(100%)
          rotate(270deg);
        margin-block-start: -1px;
        margin-inline-end: 1px;
      }

      & .shape.bottom {
        bottom: 1px;
        left: -1px;
        transform: translateY(100%) rotate(270deg);
      }
    }

    @media (--laptop-and-up) {
      width: 100%;

      position: absolute;
      top: 6rem;

      & .shape.top {
        top: 2px;
        left: var(--_offset-left);
        margin-left: -1px;
        transform: translateY(-100%) rotate(180deg);
      }
      & .shape.bottom {
        bottom: 1px;
        left: var(--_offset-left);
        margin-left: -1px;
        transform: translateY(100%) rotate(270deg);
      }
    }
  }

  .hero-text {
    & .title {
    }

    @media (--tablet-and-up) {
      /* min-width: fit-content; */
      max-width: 26rem;
      padding-inline-end: var(--space-9-fixed);
      padding-block-end: var(--space-4-fixed);

      background-color: var(--color-secondary);

      border-bottom-right-radius: var(--_border-radius);
    }

    @media (--laptop-and-up) {
      /* TODO: adjust max width */

      max-width: 30.5rem;

      padding-inline-end: var(--space-4-fixed);
      padding-block: var(--space-7-fixed);

      border-top-right-radius: var(--_border-radius);
      border-bottom-right-radius: var(--_border-radius);

      /* transform: translateX(10%); */
    }
  }

  .img-wrapper {
    @media (--laptop-and-up) {
      padding-left: var(--_offset-left);
    }
  }

  .hero-img {
    --_height: 24rem;

    inline-size: 100%;
    block-size: var(--_height);

    background-color: var(--color-accent);

    border-radius: var(--_border-radius);

    & > :global(picture) {
      height: 100%;
    }

    & > :global(picture),
    & > :global(picture) > :global(img) {
      object-fit: cover;
      inline-size: 100%;
      block-size: 100%;
      border-radius: var(--_border-radius);
    }

    &.collage {
      padding: var(--space-4-fixed);
    }

    &.collage > :global(picture),
    &.collage > :global(picture) > :global(img) {
      object-fit: contain;
      object-position: right 50%;
    }

    @media (--tablet-and-up) {
      --_height: 35rem;
    }

    @media (--laptop-and-up) {
      --_height: 40rem;
    }
  }

  .pagination {
    padding-block: var(--space-11-fixed);

    @media (--tablet-and-up) {
      padding-block: var(--space-13-fixed);
    }
  }
</style>
